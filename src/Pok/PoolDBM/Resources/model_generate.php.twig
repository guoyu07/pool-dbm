<?php

namespace {{ model_namespace }};

{% if associations.many is not empty %}
use Pok\PoolDBM\Collections\ArrayCollection;

{% endif %}
/**
 * Model {{ model_name }}
 *
 * This class was generated by the Pool-DBM.
 */
class {{ model_name }}{% if extends is not empty %} extends {{ extends }}{% endif %}

{
{% for name, refl in managers %}
    private ${{ name }};
{% endfor %}
{% for name, refl in associations.all %}
    private ${{ name }};
{% endfor %}

    /**
     * Constructor.
     */
    public function __construct()
    {
{% for name, refl in managers %}
        $this->{{ name }} = new {{ refl.namespace }}();
{% endfor %}
{% if associations.many is not empty %}

{% for name, refl in associations.many %}
        $this->{{ name }} = new ArrayCollection($this, array(
{% for managerName, method in refl.fields %}
            '{{ managerName }}' => '{{ method }}',
{% endfor %}
        ));
{% endfor %}
{% endif %}
    }
{% for name, refl in managers %}

    /**
     * Returns {{ name }}.
     *
     * @return {{ refl.namespace }}
     */
    public function get{{ name|ucfirst }}()
    {
        return $this->{{ name }};
    }
{% endfor %}
{# setter/getter #}
{% for name, refl in managers %}
{% for method in refl.methods %}

{% if method.comment is not empty %}
    {% if 'getter' == method.type %}{{ method.comment }}{% else %}{{ method.comment|replace({'*/': "*\n     * @return " ~ model_name ~ "\n     */"}) }}{% endif %}

{% endif %}
    public function {{ method.name }}({{ method.arguments|join(', ') }})
    {
{% if 'getter' == method.type %}
        return $this->{{ name }}->{{ method.name }}({{ method.arguments|join(', ') }});
{% else %}
        $this->{{ name }}->{{ method.name }}({% for param in method.parameters %}${{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});

        return $this;
{% endif %}
    }
{% endfor %}
{% endfor %}
{% for name, refl in associations.one %}

    /**
     * Returns collection of {{ name }}.
     *
     * @return \{{ refl.className }}
     */
    public function get{{ name|ucfirst }}()
    {
        return $this->{{ name }};
    }

    /**
     * Sets {{ name }}.
     *
     * @param \{{ refl.className }} ${{ name }}
     *
     * @return {{ model_name }}
     */
    public function set{{ name|ucfirst }}(\{{ refl.className }} ${{ name }})
    {
        $this->{{ name }} = ${{ name }};

        return $this;
    }
{% endfor %}
{% for name, refl in associations.many %}

    /**
     * Returns collection of {{ name }}.
     *
     * @return \{{ refl.className }}[]
     */
    public function get{{ name|ucfirst }}()
    {
        return $this->{{ name }};
    }
{% endfor %}
}
